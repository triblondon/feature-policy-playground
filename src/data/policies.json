[
  {
    "name": "geolocation",
    "description": "The *geolocation* policy controls whether the current document is allowed to use the [Geolocation interface](https://dev.w3.org/geo/api/spec-source.html).  If disabled in any document, calls to both [`getCurrentPosition`](https://dev.w3.org/geo/api/spec-source.html#get-current-position) and [`watchPosition`](https://dev.w3.org/geo/api/spec-source.html#watch-position) must result in the error callback being invoked with `PERMISSION_DENIED`.",
    "links": [
      { "rel": "policy-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy/geolocation" },
      { "rel": "feature-spec", "href": "https://dev.w3.org/geo/api/spec-source.html", "note": "Geolocation API" }
    ],
    "tags": ["consent-required"]
  },
  {
    "name": "accelerometer",
    "description": "The sensor policies are *ambient-light-sensor*, *accelerometer*,  *gyroscope*, and *magnetometer*.\n\nA sensor feature controls access to a device sensor of a certain type requested either through an associated [Sensor](https://w3c.github.io/sensors/#the-sensor-interface)-based interface or through an event specified in the [DeviceOrientation Event Specification](https://www.w3.org/TR/orientation-event/).\n\nIf an interface (or an event) requires access to multiple sensors of different types than each of the corresponding sensor features MUST be allowed in order to use this interface. The table below shows which sensor features are required by the existing interfaces and events.",
    "links": [
      { "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/API/Accelerometer", "note": "Accelerometer" },
      { "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/API/DeviceMotionEvent", "note": "DeviceMotion" },
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/features.md" }
    ],
    "tags": ["sensor"]
  },
  {
    "name": "midi",
    "desription": "The *midi* feature controls whether the current document is allowed to use the [Web MIDI API](https://webaudio.github.io/web-midi-api/).\n\nIf disabled in a document, the promise returned by [`requestMIDIAccess()`](https://webaudio.github.io/web-midi-api/#dom-navigator-requestmidiaccess) must reject with a `DOMException`",
    "links": [
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/features.md" },
      { "rel": "policy-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy/midi" },
      { "rel": "feature-spec", "href": "https://webaudio.github.io/web-midi-api/#dom-navigator-requestmidiaccess" },
      { "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess" }
    ],
    "tags": ["consent-required"]
  },
  {
    "name": "payment",
    "description": "The *payment* policy controls whether the current document is allowed to use the [PaymentRequest interface](https://w3c.github.io/browser-payment-api/).\n\nIf disallowed in a document, then calls to the [`PaymentRequest` constuctor](https://w3c.github.io/browser-payment-api/#constructor) MUST throw a `SecurityError`.",
    "links": [
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/features.md" },
      { "rel": "policy-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy/payment" },
      { "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest" }
    ]
  },
  {
    "name": "magnetometer",
    "description": "The sensor policies are *ambient-light-sensor*, *accelerometer*,  *gyroscope*, and *magnetometer*.\n\nA sensor feature controls access to a device sensor of a certain type requested either through an associated [Sensor](https://w3c.github.io/sensors/#the-sensor-interface)-based interface or through an event specified in the [DeviceOrientation Event Specification](https://www.w3.org/TR/orientation-event/).\n\nIf an interface (or an event) requires access to multiple sensors of different types than each of the corresponding sensor features MUST be allowed in order to use this interface. The table below shows which sensor features are required by the existing interfaces and events.",
    "tags": ["sensor"]
  },
  {
    "name": "layout-animations",
    "description": "This policy controls the ability of a document to perform animations that require updates to **layout**, rather than simply *repaints*, which are typically cheaper and allow for smoother animations.  So-called 'layout animations' can require significant CPU and often cannot be rendered smoothly.\n\nIf a document is disallowed from performing layout animations by this policy, only the inital and final states of the animation will be rendered.",
    "browserSupport": {
      "chrome": { "minVersion": 74 }
    },
    "tags": ["anitpattern", "performance"]
  },
  {
    "name": "vertical-scroll",
    "description": "The `vertical-scroll` policy controls whether a document has the right to override normal scrolling behaviour. When disallowed in a document, calls to `event.preventDefault()` on scroll-related events will be ineffective, the CSS property `touch-action: none` will behave as if it is `touch-action: pan-y`, and `element.scrollIntoView()` will not propagate outside the document (ie. any parent frame that needs to be scrolled in order for the element to be in view, will not be).",
    "links": [
      { "rel": "policy-spec", "href": "https://github.com/ehsan-karamad/feature-policy/blob/master/policies/vertical_scroll.md" }
    ]
  },
  {
    "name": "camera",
    "description": "The *camera* policy controls access to video input devices requested through the [NavigatorUserMedia interface](https://w3c.github.io/mediacapture-main/getusermedia.html#navigatorusermedia).\n\nIf disabled in a document, then calls to [`getUserMedia()`](https://w3c.github.io/mediacapture-main/getusermedia.html#dom-mediadevices-getusermedia()) MUST NOT grant access to video input devices in that document.",
    "links":[
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/features.md" },
      { "rel": "feature-spec", "href": "https://w3c.github.io/mediacapture-main/getusermedia.html#navigatorusermedia" },
      { "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia" }
    ],
    "tags": ["consent-required"]
  },
  {
    "name": "usb",
    "description": "The *usb* feature controls whether the current document is allowed to use the [WebUSB API](https://wicg.github.io/webusb/).\n\nIf disabled in a document, then calls to the [`getDevices()`](https://wicg.github.io/webusb/#dom-usb-getdevices) should return a promise which rejects with a SecurityError DOMException.",
    "links": [
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/features.md" },
      { "rel": "feature-spec", "href": "https://wicg.github.io/webusb/" },
      { "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/API/USB/getDevices" }
    ],
    "tags": ["consent-required"]
  },
  {
    "name": "unoptimized-images",
    "description": "When optimizing images, the file size should be kept as small as possible. The larger the download size is, the longer it takes a page to load. Stripping metadata, picking a good image format, and using image compression, are all common ways to optimize an image's file size. `unoptimized-images` is a policy that restricts images to have a file size (in terms of number of bytes) no more than a specified ratio of the image size (width * height) on the web page.\n\nWhen a document is disallowed to use `unoptimized-images` policy, its `<img>` elements whose file sizes are too big will be rendered as placeholder images.\n\n### Specification\n\nThe default maximum file size of an optimized image is calculated as following:\n\n```metadata size limit + byte-per-pixel ratio * image resolution```\n\n* For images of one of the modern formats (JPEG, PNG, GIF, WEBP, and SVG)\n    * The default metadata size limit is tentatively 1KB (1024 bytes).\n    * The default byte-per-pixel ratio is tentatively 0.5.\n* For images of other legacy formats\n    * The metadata size limit is set to 0KB.\n    * The byte-per-pixel ratio is set to 0.",
    "tags": ["antipattern", "performance"]
  },
  {
    "name": "oversized-images",
    "description": "This policy allows a document to serve images whose dimensions are larger than the container in which they are rendered on the page.  Rendering images smaller than their native size is a waste of bandwidth and requires additional CPU.  By default, this policy is allowed, and images may be oversized by an unlimited margin, but documents which are disallowed from doing this, will be allowed to oversize by up to a factor of 2.  If this factor is exceeded by any image on the page, a placeholder image will be rendered instead.",
    "links": [
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/policies/optimized-images.md" }
    ],
    "tags": ["antipattern", "performance"]
  },
  {
    "name": "legacy-image-formats",
    "description": "This policy controls the ability of the document to render images in legacy image formats.  These are defined as any format other than JPEG, PNG, GIF, WEBP, or SVG.  In documents in which this policy is disallowed, legacy-format images will be rendered with inverted colours.",
    "links": [
      { "rel": "policy-spec", "href": "https://github.com/loonybear/feature-policy/blob/images/policies/optimized-images.md#legacy-image-formats-policy" }
    ],
    "tags": ["antipattern", "performance"]
  },
  {
    "name": "picture-in-picture",
    "description": "The *picture-in-picture* policy controls whether the current document is allowed to use [Picture In Picture](http://wicg.github.io/picture-in-picture).  If disallowed in a document, then calls to [`requestPictureInPicture()`](https://wicg.github.io/picture-in-picture/#dom-htmlvideoelement-requestpictureinpicture) MUST throw a `SecurityError` and [`pictureInPictureEnabled`](https://wicg.github.io/picture-in-picture/#dom-document-pictureinpictureenabled) MUST return `false`.",
    "links": [
      { "rel": "feature-spec", "href": "https://wicg.github.io/picture-in-picture/" }
    ],
    "browserSupport": {
      "chrome": { "minVersion": 70 }
    }
  },
  {
    "name": "speaker",
    "description": "The *speaker* policy controls access to audio output devices requested through the [NavigatorUserMedia interface](https://w3c.github.io/mediacapture-main/getusermedia.html#navigatorusermedia).\n\nIf disallowed in a document, then calls to [`getUserMedia()`](https://w3c.github.io/mediacapture-main/getusermedia.html#dom-mediadevices-getusermedia()) MUST NOT grant access to audio output devices in that document.",
    "links": [
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/features.md" }
    ],
    "tags": ["consent-required"]
  },
  {
    "name": "fullscreen",
    "description": "The *fullscreen* policy controls whether the [`requestFullscreen()`](https://fullscreen.spec.whatwg.org/#dom-element-requestfullscreen) method is allowed to request fullscreen.\n\nIf disallowed in any document, the document will not be allowed to use fullscreen.  Triggering full-screen mode can be a jarring experience for users, and can be exploited by content that would otherwise be confined to a small frame.",
    "links": [
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/features.md" },
      { "rel": "feature-spec", "href": "https://fullscreen.spec.whatwg.org/#dom-element-requestfullscreen" },
      { "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen" }
    ]
  },
  {
    "name": "vr",
    "description": "The *vr* policy controls whether the current document is allowed to use the [WebVR API](https://immersive-web.github.io/webvr/spec/1.1/).\n\nIf disallowed in a document, then calls to the [`getVRDisplays()`](https://immersive-web.github.io/webvr/spec/1.1/#navigator-getvrdisplays-attribute) should return a promise which rejects with a SecurityError DOMException.",
    "links": [
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/features.md" },
      { "rel": "feature-spec", "href": "https://immersive-web.github.io/webvr/spec/1.1/" },
      { "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getVRDisplays" }
    ]
  },
  {
    "name": "document-domain",
    "description": "The `document-domain` policy controls whether the current document is allowed to set `document.domain`. When this policy is denied to the current document's origin, attempting to set `document.domain` will fail and cause a `SecurityError` `DOMException` to be be thrown.  Changing the value of `document.domain` used to be a common practice to allow cross-origin communication, before better mechanisms such as [postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) existed, and today there are virtually no good reasons to change it.",
    "links": [
      { "rel": "policy-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy/document-domain" },
      { "rel": "policy-spec", "href": "https://html.spec.whatwg.org/multipage/infrastructure.html#document-domain-feature" },
      { "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/domain" }
    ],
    "browserSupport": {
      "chrome": { "minVersion": 72 }
    },
    "tags": ["antipattern"]
  },
  {
    "name": "encrypted-media",
    "description": "The `encrypted-media` policy controls whether encrypted media extensions are available in the document.\n\nIf disabled, the promise returned by `requestMediaKeySystemAccess()` must return a promise which rejects with a `SecurityError` `DOMException` object as its parameter.",
    "links": [
      { "rel": "policy-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy/encrypted-media" },
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/features.md" },
      { "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess" }
    ]
 },
  {
    "name": "autoplay",
    "description": "The *autoplay* feature controls access to autoplay of media requested through the [HTMLMediaElement interface](http://w3c.github.io/html/semantics-embedded-content.html#htmlmediaelement).\n\nIf disabled in a document, then calls to [`play()`](http://w3c.github.io/html/semantics-embedded-content.html#dom-htmlmediaelement-play) without a user gesture will reject the promise with a `NotAllowedError` DOMException object as its parameter. The [`autoplay`](http://w3c.github.io/html/semantics-embedded-content.html#dom-htmlmediaelement-autoplay) attribute will be ignored.",
    "links": [
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/features.md" },
      { "rel": "feature-spec", "href": "http://w3c.github.io/html/semantics-embedded-content.html#htmlmediaelement" },
      { "rel": "policy-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy/autoplay" },
      { "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay" }
    ],
    "browserSupport": {
      "chrome": false,
      "firefox": false
    },
    "tags": ["antipattern"]
  },
  {
    "name": "wake-lock",
    "description": "This policy controls the ability of a document to invoke the [Wake Lock API](https://w3c.github.io/wake-lock/), which allows a webpage to prevent a device from going to sleep if the user becomes idle. If disallowed in the document, a call to `Navigator.requestWakeLock()` will return a promise that rejects.",
    "links": [
      { "rel": "policy-spec", "href": "https://w3c.github.io/wake-lock/#dfn-wake-lock-feature" },
      { "rel": "feature-spec", "href": "https://w3c.github.io/wake-lock/" },
      { "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestWakeLock" }
    ]
  },
  {
    "name": "font-display-late-swap",
    "description": "This policy controls the ability of a document to use the `auto`, `block`, and `swap` values of the [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) CSS property.  If the policy is disallowed for the current document, then any elements with a font-display that is not `fallback` or `optional` will be set to `optional`.\n\nIt's annoying for users when fonts take a long time to load, rendering a page unreadable even though the text is available ('blocking').  Not quite as bad, but still a jarring user experience, is when a fallback font is used and the element is rerendered in the webfont when it is available ('swapping').  Disabling the `font-display-late-swap` policy prevents both of these effects by giving the webfont a very small window of opportunity to load, and if it doesn't load in time, simply not using it at all and continuing to use the fallback instead.",
    "links": [
      { "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display" },
      { "rel": "feature-spec", "href": "https://drafts.csswg.org/css-fonts-4/#font-display-desc" },
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/policies/font-display-late-swap.md" }
    ],
    "browserSupport": {
      "chrome": { "minVersion": 74 }
    },
    "tags": ["antipattern"]
  },
  {
    "name": "unsized-media",
    "description": "The `unsized-media` policy controls whether documents are allowed to resize images to their 'natural' size.\n\nWhen a document contains images or videos without explicit dimensions, the size is determined by reading the image data.  This takes time, and therefore causes the document layout to change when the image dimensions become known.  When a document is disallowed to use `unsized-media` with this policy, its `<img>`, `<video>`, and `<svg:image>` elements will adopt a default size (300px X 150px) and will not change size when the image data is loaded, providing a potentially less juddery user experience during page load.",
    "links": [
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/policies/unsized-media.md" }
    ],
    "tags": ["antipattern"]
  },
  {
    "name": "ambient-light-sensor",
    "description": "The sensor policies are *ambient-light-sensor*, *accelerometer*,  *gyroscope*, and *magnetometer*.\n\nA sensor feature controls access to a device sensor of a certain type requested either through an associated [Sensor](https://w3c.github.io/sensors/#the-sensor-interface)-based interface or through an event specified in the [DeviceOrientation Event Specification](https://www.w3.org/TR/orientation-event/).\n\nIf an interface (or an event) requires access to multiple sensors of different types than each of the corresponding sensor features MUST be allowed in order to use this interface. The table below shows which sensor features are required by the existing interfaces and events.",
    "tags": ["sensor"]

  },
  {
    "name": "gyroscope",
    "description": "The sensor policies are *ambient-light-sensor*, *accelerometer*,  *gyroscope*, and *magnetometer*.\n\nA sensor feature controls access to a device sensor of a certain type requested either through an associated [Sensor](https://w3c.github.io/sensors/#the-sensor-interface)-based interface or through an event specified in the [DeviceOrientation Event Specification](https://www.w3.org/TR/orientation-event/).\n\nIf an interface (or an event) requires access to multiple sensors of different types than each of the corresponding sensor features MUST be allowed in order to use this interface. The table below shows which sensor features are required by the existing interfaces and events.",
    "tags": ["sensor"]
  },
  {
    "name": "document-write",
    "description": "When this policy is disabled, the APIs `document.write`, `document.writeln`, `document.open` and `document.close` will thow a `DOMException` when used.  These APIs have been around since the very early days of the web and using them is a bad idea because they dynamically rewrite your HTML markup and block parsing of the document.",
    "links": [
			{ "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/policies/document-write.md" },
			{ "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/API/Document/write" },
			{ "rel": "feature-spec", "href": "https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-document-write" }
    ],
    "browserSupport": {
      "chrome": { "minVersion": 74 }
    },
    "tags": ["antipattern", "performance"]
  },
  {
    "name": "lazyload",
    "description": "The `lazyload` policy grants the ability for a document to control whether assets are loaded lazily, ie. only when the user scrolls the docuement such that the asset is within the visible area of the viewport.\n\nIf the policy is enabled, or not specified, the document has full control over lazy-loading, using the [lazyload](https://docs.google.com/document/d/1e8ZbVyUwgIkQMvJma3kKUDg8UUkLRRdANStqKuOIvHg/edit) attribute of `<img>` and `<iframe>` tags.  If the policy is disabled, the user agent **will lazy-load all assets** regardless of the presence or value of any `lazyload` attribute on the element itself.",
    "links": [
      { "rel": "policy-spec", "href": "https://github.com/whatwg/html/pull/3752", "note": "Pull request" },
      { "rel": "feature-spec", "href": "https://docs.google.com/document/d/1e8ZbVyUwgIkQMvJma3kKUDg8UUkLRRdANStqKuOIvHg/edit", "note": "Google doc" }
    ],
    "browserSupport": {
      "chrome": false
    },
    "tags": ["performance"]
  },
  {
    "name": "sync-script",
    "description": "The *sync-script* policy controls whether a document will execute parser-blocking JavaScript.  This includes both external `<script src=''>` resources that do not have the `async` or `defer` attributes, but also any inline script that is not an ES module, and which does not have a `defer` attribute.  Blocked scripts will be skipped by the parser completely, ie. they are not simply forced to execute asynchronously, since that may result in unexpected behaviour.",
    "links": [
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/issues/135", "note": "Tracking issue"}
    ],
    "tags": ["antipattern", "performance"]
  },
  {
    "name": "sync-xhr",
    "description": "The *sync-xhr* policy controls whether synchronous requests can be made through the [XMLHttpRequest API](https://xhr.spec.whatwg.org/).\n\nIf disallowed in a document, then calls to [`send()`](https://xhr.spec.whatwg.org/#the-send()-method) on `XMLHttpRequest` objects with the synchronous flag set will fail, causing a NetworkError DOMException to be thrown.",
    "links": [
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/features.md" },
      { "rel": "feature-spec", "href": "https://xhr.spec.whatwg.org/#the-send()-method" },
      { "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open" }
    ],
    "tags": ["antipattern", "performance"]
  },
  {
    "name": "microphone",
    "description": "The *microphone* policy controls access to audio input devices requested through the [NavigatorUserMedia interface](https://w3c.github.io/mediacapture-main/getusermedia.html#navigatorusermedia).\n\nIf disallowed in a document, then calls to [`getUserMedia()`](https://w3c.github.io/mediacapture-main/getusermedia.html#dom-mediadevices-getusermedia()) MUST NOT grant access to audio input devices in that document.",
    "links": [
      { "rel": "policy-spec", "href": "https://github.com/w3c/webappsec-feature-policy/blob/master/features.md" },
      { "rel": "feature-spec", "href": "https://w3c.github.io/mediacapture-main/getusermedia.html#navigatorusermedia" },
      { "rel": "policy-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy/microphone" },
      { "rel": "feature-mdn", "href": "https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia" }
    ],
    "tags": ["user-consent"]
  }
]
